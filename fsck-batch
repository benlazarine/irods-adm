#! /bin/bash

readonly EXEC_NAME=($basename "$0")
readonly VERSION=2

show_help()
{
  cat << EOF
$EXEC_NAME - version $VERSION

Usage:
 $EXEC_NAME [options] <class_base>

checks data object replicas for correct sizes and checksums

Parameters:
 <class_base>  the common basename of the files that hold the data objects with
               incorrect checksums or sizes

Options:
 -j, --jobs <n>  perform <n> checks simultaneously, default is the number of
                 CPUs

 -h, --help     display help text and exit
 -v, --version  display version and exit

Summary:
The script reads a list of iRODS data object paths from standard in, one per
line, and checks to see if any of the replicas have an incorrect checksum or
size. The ones with incorrect sizes are appended to the file
<class_base>.bad_size. The ones with incorrect checksums are appended to the
file <class_base>.bad_chksum. In either case, only one log entry will be logged
per line. If an error occurs while checking a replica, the error is written to
<class_base>.errors.

Non error log entries have the following form.

<rescource hierarchy> <data object path>
EOF
}


show_version()
{
  printf '%s\n' "$VERSION"
}


exit_with_help()
{
  show_help >&2
  exit 1
}


if ! opts=$(getopt --name "$EXEC_NAME" --options hj:v --longoptions help,jobs:,version -- "$@")
then
  printf '\n' >&2
  exit_with_help
fi

eval set -- "$opts"

while true
do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -j|--jobs)
      readonly JOBS="$2"
      shift 2
      ;;
    -v|--version)
      show_version
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      exit_with_help
      ;;
  esac
done

if [ "$#" -lt 1 ]
then
  exit_with_help
fi

readonly CLASS_BASE="$1"
readonly EXEC_DIR=$(dirname "$0")

export ERR_LOG="$CLASS_BASE".errors


check_obj()
{
  local objPath="$1"

  while read -r rescHier storeHost filePath
  do
    reason=
    resp=$(ssh -q "$storeHost" ifsck -K \"$filePath\" 2>> "$ERR_LOG")

    if [[ "$resp" =~ size\.$ ]]
    then
      reason=size
    elif [[ "$resp" =~ checksum\.$ ]]
    then
      reason=checksum
    fi

    if [ -n "$reason" ]
    then
      printf '%s %s %s\n' "$reason" "$rescHier" "$objPath"
    fi
  done < <(cd "$EXEC_DIR" && ./get-replicas "$objPath")
}
export -f check_obj


log()
{
  while read -r reason rescHier objPath
  do
    printf -v entry '%s %s\n' "$rescHier" "$objPath"

    if [ "$reason" = size ]
    then
      printf '%s' "$entry" >> "$CLASS_BASE".bad_size
    elif [ "$reason" = checksum ]
    then
      printf '%s' "$entry" >> "$CLASS_BASE".bad_chksum
    fi
  done
}


if [ -n "$JOBS" ]
then
  readonly JobsOpt="-j$JOBS"
fi

parallel --eta --no-notice --delimiter '\n' --max-args 1 "$JobsOpt" check_obj | log
