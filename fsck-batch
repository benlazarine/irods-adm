#! /bin/bash

readonly EXEC_NAME=($basename "$0")
readonly VERSION=1

show_help()
{
  cat << EOF
$EXEC_NAME - version $VERSION

Usage:
 $EXEC_NAME [options] <bad size log> <bad checksum log>

checks data object replicas for correct sizes and checksums

Parameters:
 <bad size log>      a file where the replicas with incorrect sizes are appended
 <bad checksum log>  a file where the replicas with incorrect checksums are 
                     appended

Options:
 -j, --jobs <n>  perform <n> checks simultaneously, default is the number of 
                 CPUs

 -h, --help     display help text and exit
 -v, --version  display version and exit

Summary:
The script reads a list of iRODS data object paths from standard in, one per 
line, and checks to see if any of the replicas have an incorrect checksum or 
size. The ones with incorrect sizes are appended to the file <bad size log>. The 
ones with incorrect checksums are appended to the file <bad checksum log>. In
either case, only one log entry will be logged per line.

Each log entry has the following form.

<rescource hierarchy> <data object path>
EOF
}


show_version()
{
  printf '%s\n' "$VERSION"
}


exit_with_help()
{
  show_help >&2
  exit 1
}


if ! opts=$(getopt --name "$EXEC_NAME" --options hj:v --longoptions help,jobs:,version -- "$@")
then
  printf '\n' >&2
  exit_with_help
fi

eval set -- "$opts"

while true
do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -j|--jobs)
      readonly JOBS="$2"
      shift 2
      ;;
    -v|--version)
      show_version
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      exit_with_help
      ;;
  esac
done

if [ "$#" -lt 2 ]
then
  exit_with_help
fi

readonly BAD_SIZE_LOG="$1"
readonly BAD_CHECKSUM_LOG="$2"


get_replicas()
{
  local collPath="$1"
  local objName="$2"

  iquest --no-page \
    '%s %s %s' \
    "SELECT DATA_ID, DATA_RESC_HIER, DATA_PATH 
     WHERE COLL_NAME = '$collPath' AND DATA_NAME = '$objName'"
}
export -f get_replicas


check_obj()
{
  local objPath="$1"
  
  local collPath=$(dirname "$objPath")
  local objName=$(basename "$objPath")

  while read -r id rescHier filePath
  do
    reason=
    storeResc="${rescHier##*;}"
    storeHost=$(iquest '%s' "SELECT RESC_LOC WHERE RESC_NAME = '$storeResc'")
    resp=$(ssh -q "$storeHost" su --command \'ifsck -K \"$filePath\"\' --login irods)
    
    if [[ "$resp" =~ size\.$ ]]
    then
      reason=size
    elif [[ "$resp" =~ checksum\.$ ]]
    then
      reason=checksum
    fi

    if [ -n "$reason" ]
    then
      printf '%s %s %s\n' "$reason" "$rescHier" "$objPath"
    fi
  done < <(get_replicas "$collPath" "$objName") 
}
export -f check_obj


log()
{
  while read -r reason rescHier objPath
  do
    printf -v entry '%s %s\n' "$rescHier" "$objPath"

    if [ "$reason" = size ]
    then
      printf '%s' "$entry" >> "$BAD_SIZE_LOG"
    else
      printf '%s' "$entry" >> "$BAD_CHECKSUM_LOG"
    fi
  done
}


if [ -n "$JOBS" ]
then
  readonly JobsOpt="-j $JOBS"
fi

parallel --eta --no-notice --delimiter '\n' --max-args 1 "$JobsOpt" check_obj | log
