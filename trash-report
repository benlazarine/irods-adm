#! /bin/bash

readonly ExecName=$(basename $0)
readonly Version=1


show_help()
{
  cat <<EOF

$ExecName version $Version

Usage:
 $ExecName [options]

Generates a report on the data objects in the trash that are older than 31 days
and their volume broken down by the storage resource holding the corresponding
files.


Options:
 -H, --host <host>  connect to the ICAT's DBMS on the host <host> instead of
                    the PostgreSQL default
 -p, --port <port>  connect to the ICAT's DBMS listening on TCP port <port>
                    instead of the PostgreSQL default

 -h, --help     display help text and exit
 -v, --version  display version and exit
EOF
}


main()
{
  local opts=$(getopt --longoptions help,host:,port:,version --name "$ExecName" --options hH:p:v \
                      -- \
                      "$@")

  if [ "$?" -ne 0 ]
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      -H|--host)
        local hostArg="--host $2"
        shift 2
        ;;
      -p|--port)
        local portArg="--port $2"
        shift 2
        ;;
      -v|--version)
        show_version
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        show_help >&2
        return 1
        ;;
    esac
  done

  local now_s=$(date '+%s')
  local cutOff_min=$((now_s / 60 - 31 * 24 * 60))
  local cutOff_s=$((cutOff_min * 60))
  mk_trash_report "$cutOff_s" | psql $hostArg $portArg ICAT icat_reader
}


mk_trash_report()
{
  local cutOff_s="$1"

  cat <<SQL
\\timing on

BEGIN;

\\echo
\\echo Gathering trash collections
CREATE TEMPORARY TABLE trash_collections (id, owner) AS
WITH RECURSIVE
  colls(id, name, owner) AS (
    SELECT c.coll_id, c.coll_name, u.user_name
    FROM r_coll_main AS c
      JOIN r_user_main AS u ON c.coll_name = '/iplant/trash/home/' || u.user_name
    UNION ALL
    SELECT c1.coll_id, c1.coll_name, c2.owner
    FROM r_coll_main AS c1 JOIN colls AS c2 ON c2.name = c1.parent_coll_name)
SELECT id, owner FROM colls;
CREATE INDEX idx_trash_collections ON trash_collections(id);

\\echo
\\echo Gathering trash
CREATE TEMPORARY TABLE trash (id, size, resource, owner, delete) AS
SELECT
  d.data_id,
  d.data_size,
  REGEXP_REPLACE(d.resc_hier, '^.*;', ''),
  c.owner,
  d.modify_ts <= '0$cutOff_s'
FROM r_data_main AS d JOIN trash_collections AS c ON c.id = d.coll_id;
CREATE INDEX idx_trash_owner ON trash(owner);
CREATE INDEX idx_trash_resource ON trash(resource);

\\echo
\\echo Summarizing trash statistics by owner
CREATE TEMPORARY TABLE trash_by_owner (owner, delete_count, delete_volume, count, volume) AS
SELECT
  owner,
  COUNT(NULLIF(delete, FALSE)),
  SUM(CASE WHEN delete THEN size ELSE 0 END),
  COUNT(*),
  SUM(size)
FROM trash
GROUP BY owner;
CREATE INDEX idx_trash_by_owner_delete_count ON trash_by_owner(delete_count);
CREATE INDEX idx_trash_by_owner_delete_volume ON trash_by_owner(delete_volume);

\\echo
\\echo Trash Summary
\\echo =============
SELECT
  SUM(delete_count)            AS "To Delete Count",
  SUM(delete_volume) / 2 ^ 40  AS "To Delete Volume (TiB)",
  SUM(count)                   AS "Trash Count",
  SUM(volume) / 2 ^ 40         AS "Trash Volume (TiB)"
FROM trash_by_owner;

\\echo
\\echo Trash by Resource
\\echo =================
SELECT
  r.resc_name                                              AS "Storage Resource",
  COUNT(NULLIF(t.delete, FALSE))                           AS "To Delete Count",
  SUM(CASE WHEN t.delete THEN t.size ELSE 0 END) / 2 ^ 40  AS "To Delete Volume (TiB)",
  COUNT(t.id)                                              AS "Trash Count",
  SUM(COALESCE(t.size, 0)) / 2 ^ 40                        AS "Trash Volume (TiB)"
FROM r_resc_main AS r LEFT JOIN trash AS t ON t.resource = r.resc_name
WHERE r.resc_name != 'bundleResc' AND r.resc_type_name IN ('unixfilesystem', 'unix file system')
GROUP BY r.resc_name
ORDER BY r.resc_name;

\\echo
\\echo Top 10 Users by Delete Count
\\echo ============================
SELECT
  owner                   AS "User",
  delete_count            AS "To Delete Count",
  delete_volume / 2 ^ 30  AS "To Delete Volume (GiB)",
  count                   AS "Trash Count",
  volume / 2 ^ 30         AS "Trash Volume (GiB)"
FROM trash_by_owner
ORDER BY delete_count DESC
LIMIT 10;

\\echo
\\echo Top 10 Users by Delete Volume
\\echo =============================
SELECT
  owner                   AS "User",
  delete_count            AS "To Delete Count",
  delete_volume / 2 ^ 30  AS "To Delete Volume (GiB)",
  count                   AS "Trash Count",
  volume / 2 ^ 30         AS "Trash Volume (GiB)"
FROM trash_by_owner
ORDER BY delete_volume DESC
LIMIT 10;

ROLLBACK;
SQL
}


show_version()
{
  printf '%s\n' "$Version"
}


set -e


main "$@"
