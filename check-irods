#!/bin/bash

readonly ExecName=$(basename "$0")


show_help()
{
  cat <<EOF

$ExecName

Usage:
 $ExecName [options]

This script will check that an iRODS grid is reachable from localhost.

Options:
 -h, --help  display help text and exit

Summary:

This script will check that the IES and each of the resource in the currently
configured iRODS zone for localhost can be accessed. It will make an ilsresc
request to check that the IES is reacable. Then it will upload a 64 MiB file to
each of the resources in the ilsresc response.
EOF
}


readonly TestFileSize=$((64 * 1024 * 1024))


main()
{
  local opts
  if ! opts=$(getopt --name "$ExecName" --longoptions help --options h -- "$@")
  then
    show_help >&2
    return 1
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h,--help)
        show_help
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        show_Help >&2
        return 1
        ;;
    esac
  done

  do_checks
}


display_errors()
{
  local resource="$1"

  while IFS= read -r
  do
    if [ -n "$REPLY" ]
    then
      printf '(%s) %s\n' "$resource" "$REPLY" >&2
    fi
  done
}


do_checks()
{
  local testFile
  if ! testFile=$(mktemp)
  then
    log_status '*' error
    return 1
  fi

  # shellcheck disable=SC2064
  if ! trap "rm --force '$testFile'" EXIT
  then
    log_status '*' error
    return 1
  fi

  if ! truncate --size "$TestFileSize" "$testFile"
  then
    log_status '*' error
    return 1
  fi

  if lsrescResp=$(ilsresc)
  then
    log_status IES ok
  else
    log_status IES fail
    return 0
  fi

  local resources=()

  while IFS= read -r
  do
    resources+=("$REPLY")
  done < <(sed --quiet 's/^\([A-Za-z][^:]*\).*/\1/p' <<< "$lsrescResp")

  for resource in "${resources[@]}"
  do
    test_resource "$resource" "$testFile" 2> >(display_errors "$resource") &
  done | sort --ignore-case --key 1
}


log_status()
{
  local system="$1"
  local status="$2"

  printf '%s %s\n' "$system" "$status"
}


test_resource()
{
  local resource="$1"
  local file="$2"

  while true
  do
    obj=check-irods-$(date '+%s')."$RANDOM"

    if ! resp=$(timeout 1m iput -R "$resource" "$file" "$obj" 2>&1)
    then
      if [[ "$resp" =~ OVERWRITE_WITHOUT_FORCE_FLAG ]]
      then
        continue
      fi

      printf '%s\n' "$resp" >&2
      log_status "$resource" fail
    else
      log_status "$resource" ok
    fi

    return 0
  done
}


set -e
main "$@"
