#! /bin/bash
#
# SUMMARY
#
# This script will check that an iRODS grid is reachable from various places on the Internet.
#
# Given a list of hosts, this script will check that the IES and each of the resources in the
# corresponding zone can be accessed. The script assumes that the account on the remote host is 
# configured to use the desired iRODS grid. 
# It will make an `ilsresc` request to check that the IES is reachable. Then it will upload a 40 MB 
# to each of the resources in the `ilsresc` response.
#
#
# PREREQUISITES
#
# 1. The local host will need the following software installed.
#
#   - bash
#   - ssh
# 
# 2. Each remote host will need the following software installed.
#
#   - bash
#   - cat
#   - dd
#   - icommands
#   - timeout
#   - wc 
#
# 3. Each remote host will need to have an account configured to use the desired iRODS grid with
#    icommands by default. Also the account must already be authenticated with iRODS. In other 
#    words, calling an icommand will act on the desired grid without prompting for a password.
# 
# 4. `ssh` on the account on the local host must be configured to connect to each remote host as
#    the correct user by default. Furthermore, it should be configured so that `ssh` can connect to
#    each remote host without prompting for a password. 


readonly Version=1
readonly Name=check-irods


show_help()
{
  printf 'Usage: %s [OPTIONS...] HOSTS...\n' "$Name"
  printf '  -d DIRECTORY  the directory where the status logs are to be written\n'
  printf '  -h            help should be shown and then exit\n'
  printf '  -V            version should be shown and then exit\n'
}


show_version()
{
  printf '%s - irods status checker\n' "$Name"
  printf 'version: %s\n' "$Version"
}


check_from_host()
{
  local host=$1

  ssh -q "$host" 'cat > check-irods.sh; bash check-irods.sh' <<'CHECK-IRODS.SH' 
    #!/bin/bash

    readonly TestFile=irods40MBFile
    readonly ExpFileSize=40000000

    log_status() {
      local system=$1
      local status=$2
      printf '%s %s\n' "$system" "$status"
    }

    test_resource() {
      local resource=$1
      local file=$2
      timeout 1m iput -R "$resource" -f "$file" >&2
      if [ $? -ne 0 ]; then
        log_status "$resource" fail
      else
        log_status "$resource" ok
      fi
    }

    touch "$TestFile"
    declare -i actFileSize=$(wc -c < "$TestFile")
    if [ $? -ne 0 ] || [ "$actFileSize" -ne "$ExpFileSize" ]; then
      dd if=/dev/urandom of="$TestFile" bs="$ExpFileSize" count=1
    fi
    resources=$(ilsresc)
    if [ $? -ne 0 ]; then
      log_status '*' fail
      exit 0
    fi
    resources=$(sed '/resource group/d' <<< "$resources")
    irm -f "$TestFile" >/dev/null 2>&1
    for resource in $resources; do
      test_resource "$resource" "$TestFile" &
      sleep 1
    done
    wait
    irm -f "$TestFile" >/dev/null 2>&1
CHECK-IRODS.SH
}


display_errors()
{
  local host="$1"

  while IFS= read -r
  do
    printf "%s: %s\n" "$host" "$REPLY" >&2
  done
}


log_statuses()
{
  local host="$1"
  local log="$2"

  while read -r system status
  do
    printf '%s\t%s\t%s\t%s\n' "$(date --iso-8601=seconds)" "$host" "$system" "$status" >> "$log"
  done
}


logDir=.

while getopts 'd:hV' opt
do
  case $opt in
    d)
      logDir=$OPTARG
      ;;
    h)
      show_help
      exit 0
      ;;
    V)
      show_version
      exit 0
      ;;
    \?)
      printf '\n' >&2
      show_help >&2
      exit 1
      ;;
  esac
done

readonly Hosts=("${@:$OPTIND}")
readonly Log=$logDir/irods-check-log-$(date --iso-8601).tsv

if [ ! -e "$logDir" ]
then
  mkdir -p "$logDir"
  if [ $? -ne 0 ]
  then
    exit 1
  fi
fi

if [ ! -s "$Log" ]
then
  printf 'time\tclient\tresource\tstatus\n' > "$Log"
  if [ $? -ne 0 ]
  then
    exit 1
  fi
fi

for host in "${Hosts[@]}"
do
  check_from_host "$host" 1> >(log_statuses "$host" "$Log") 2> >(display_errors "$host") &
done

wait
