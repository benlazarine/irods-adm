#!/bin/bash

readonly ExecName=$(basename "$0")
readonly Version=1


show_help()
{
  cat << EOF

$ExecName version $Version

Usage:
  $ExecName [options] <intervals_file>

Generates a report on the number of concurrent sessions during each second.

Parameters:
  <intervals_file>  the file containing session intervals

Options:
 -h, --help     show help and exit
 -v, --version  show version and exit

Summary:

Generates a report on the number of concurrent sessions during each second. It
reads an interval report with the following format.

START_TIME STOP_TIME ...

START_TIME is the time when a session started in seconds since the POSIX epoch.
STOP_TIME is the time when the same session ended in seconds since the POSIX
epoch. The rest of the line is ignored.

The generate report is written to standard output where each line has the
following format.

TIME OPEN_SESSION_COUNT

TIME is in seconds since the POSIX epoch. OPEN_SESSION_COUNT is the number of
open sessions at TIME.

The report is sorted by time with the first time being the earliest start time
and the last time being the latest stop time.
EOF
}


main()
{
  local opts
  if ! opts=$(getopt --name "$ExecName" --options hv --longoptions help,version -- "$@")
  then
    exit_with_help
  fi

  eval set -- "$opts"

  while true
  do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      -v|--version)
        show_version
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        exit_with_help
        ;;
    esac
  done

  if [ "$#" -lt 1 ]
  then
    exit_with_help
  fi

  local intervalsFile="$1"
  count "$intervalsFile"
}


count()
{
  local intervalsFile="$1"

  local lb
  lb=$(cut --delimiter ' ' --fields 1 "$intervalsFile" | sort --numeric-sort | head --lines 1)

  local max=0

  local counts

  local words
  while read -r -a words
  do
    local start=$((words[0] - lb))
    local stop=$((words[1] - lb))

    for t in $(seq "$start" "$stop")
    do
      counts["$t"]=$((counts[t] + 1))
    done

    if [ "$stop" -gt "$max" ]
    then
      max="$stop"
    fi
  done < "$intervalsFile"

  for t in $(seq 0 "$max")
  do
    printf '%d %d\n' $((lb + t)) $((counts[t] + 0))
  done
}


exit_with_help()
{
  show_help >&2
  return 1
}


show_version()
{
   printf '%s\n' "$Version"
}


set -eu
main "$@"
