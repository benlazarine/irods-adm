#! /bin/bash

set -e

readonly EXEC_NAME=$(basename "$0")
readonly VERSION=2


show_help()
{
  cat << EOF
$EXEC_NAME version $VERSION

Usage:
 $EXEC_NAME [options]

replicates data objects to taccCorralRes

Options:
 -c, --collection <collection>  only replicate the data objects in this
                                collection
 -m, --multiplier <multiplier>  a multiplier on the number of processes to run
                                at once, default: 1
 -r, --resource <resource>      only replicate the data objects with a file on
                                this resource
 -u, --until <stop_time>        the time to stop replication in a format
                                understandable by `date`

 -h, --help     show help and exit
 -v, --verison  show version and exit

Summary:
This script replicates data objects to the taccCorralRes resource. It only
replicates objects that only have one replica that is not in the
/iplant/home/shared/aegis collection nor on the cshlWildcatRes resource. It
writes progress to standard error and all messages, error or otherwise, to
standard out.

Prerequisites:
 1) The user must be initialized with iRODS as an admin user.
 2) The user must be able to connect to the ICAT DB as the icat_reader user
    without providing a password.
EOF
}


show_version()
{
  printf '%s\n' "$VERSION"
}


exit_with_help()
{
  show_help >&2
  exit 1
}


readonly Opts=$(getopt --name "$EXEC_NAME" \
                       --options c:hm:r:u:v \
                       --longoptions collection:,help,multiplier:,resource:,until:,version \
                       -- \
                       "$@")

if [ "$?" -ne 0 ]
then
  printf '\n' >&2
  exit_with_help
fi

eval set -- "$Opts"

while true
do
  case "$1" in
    -c|--collection)
      readonly BASE_COLL="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    -m|--multiplier)
      readonly PROC_MULT="$2"
      shift 2
      ;;
    -r|--resource)
      readonly SRC_RES="$2"
      shift 2
      ;;
    -u|--until)
      readonly UNTIL="$2"
      shift 2
      ;;
    -v|--version)
      show_version
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      exit_with_help
      ;;
  esac
done

if [ -z "$PROC_MULT" ]
then
  readonly PROC_MULT=1
fi

if [ -n "$UNTIL" ]
then
  if ! export UNTIL_TS=$(date --date="$UNTIL" '+%s')
  then
    printf '%s is not a valid date format\n' "$UNTIL"
    exit 1
  fi
fi


check_time()
{
  if [ -n "$UNTIL_TS" ] && [ $(date '+%s') -ge "$UNTIL_TS" ]
  then
    return 1
  fi
}
export -f check_time


repl_batch()
{
  if ! check_time
  then
    exit 1
  fi

  irepl -B -M -v -R taccCorralRes "$@" 2>&1

# XXX: Trying to figure out the irepl error code for when irepl logs a
# '_rcConnect: connectToRhost error, server on data.cyverse.org:1247 is probably
# down status = -305113 USER_SOCK_CONNECT_ERR, No route to host' error message.
# It is probably at 113, but we should confirm.
# TODO: Once this is confirmed, if this status is returned, this function should
# wait for a bit and try again.
  local replStatus="$?"
  if [ "$replStatus" -ne 0 ]
  then
    printf 'ERROR: irepl exited with status %d\n' "$replStatus"
  fi

  exit 0
}
export -f repl_batch


update_progress()
{
  printf "$@" >&2
}


finish()
{
  local objList="$1"

  if ! check_time
  then
    update_progress 'out of time\n'
  fi

  rm --force "$objList"
}


count()
{
  awk 'BEGIN {
         RS = "\0"
         tot = 0
       }

       { tot = tot + 1 }

       END { print tot }'
}


partition()
{
  local minSizeB="$1"

  if [ "$#" -ge 2 ]
  then
    local maxSizeB="$2"
  fi

  if [ -n "$maxSizeB" ]
  then
    awk --assign min="$minSizeB" --assign max="$maxSizeB" \
        'BEGIN {
           RS = "\0"
           FS = " "
           ORS = "\0"
         }

         {
           if ($1 >= min && $1 < max) { print substr($0, length($1) + 2) }
         }'
  else
    awk --assign min="$minSizeB" \
        'BEGIN {
           RS = "\0"
           FS = " "
           ORS = "\0"
         }

         {
           if ($1 >= min) { print substr($0, length($1) + 2) }
         }'
  fi
}


select_cohort()
{
  local maxProcs="$1"
  local minThreads="$2"

  if [ "$#" -ge 3 ]
  then
    local maxThreads="$3"
  fi

  if ! check_time
  then
    exit 0
  fi

  local maxArgs=$((2 * ((maxProcs ** 2))))
  local minSizeMiB=$((minThreads * 32))
  local minSizeB=$((minSizeMiB * ((1024 ** 2))))
  local cohortList=$(tempfile)

  if [ -n "$maxThreads" ]
  then
    local maxSizeMiB=$((maxThreads * 32))
    local maxSizeB=$((maxSizeMiB * ((1024 ** 2))))

    partition "$minSizeB" "$maxSizeB"
  else
    partition "$minSizeB"
  fi > "$cohortList"

  local subTotal=$(count < "$cohortList")

  local numBatches=$((subTotal / maxArgs))
  if [ $((subTotal % maxArgs)) -ne 0 ]
  then
    ((numBatches++))
  fi

  if [ -n "$maxSizeMiB" ]
  then
    update_progress 'Replicating %s files (%s batches) with size in [%s, %s) MiB\n' \
                    "$subTotal" "$numBatches" "$minSizeMiB" "$maxSizeMiB"
  else
    update_progress 'Replicating %s files (%s batches) with size >= %s MiB\n' \
                    "$subTotal" "$numBatches" "$minSizeMiB"
  fi

  if [ "$subTotal" -gt 0 ]
  then
    maxProcs=$((maxProcs * PROC_MULT))

    parallel --eta --no-notice --null --halt 2 --max-args "$maxArgs" --max-procs "$maxProcs" \
        repl_batch \
      < "$cohortList"
  fi

  rm --force "$cohortList"
}


readonly ObjectList=$(tempfile)

trap "finish $ObjectList" EXIT

if ! iadmin lz &> /dev/null
then
  printf "aren't authenticated as a rodsadmin user\n" >&2
  exit 1
fi

if ! psql --host irods-db3 ICAT icat_reader <<< '' &> /dev/null
then
  printf "aren't able to connect to the ICAT DB as the icat_reader without a password\n" >&2
  exit 1
fi

if ! check_time
then
 printf 'Stop time is in the past\n' >&2
 exit 1
fi

update_progress 'Retrieving data objects to replicate...\n'

if [ -n "$SRC_RES" ]
then
  readonly SrcCond="d.resc_name = '$SRC_RES'"
else
  readonly SrcCond=TRUE
fi

if [ -n "$BASE_COLL" ]
then
  readonly BaseCond="c.coll_name = '$BASE_COLL' OR c.coll_name LIKE '$BASE_COLL/%'"
else
  readonly BaseCond=TRUE
fi

psql --no-align --tuples-only --record-separator-zero --field-separator ' ' --host irods-db3 \
     ICAT icat_reader \
<< EOSQL > "$ObjectList"
SELECT d.data_size, c.coll_name || '/' || d.data_name
  FROM r_data_main AS d JOIN r_coll_main AS c ON c.coll_id = d.coll_id
  WHERE d.data_id = ANY(ARRAY(SELECT data_id FROM r_data_main GROUP BY data_id HAVING COUNT(*) = 1))
    AND NOT (d.data_repl_num = 0 AND d.resc_name = 'cshlWildcatRes')
    AND c.coll_name != '/iplant/home/shared/aegis'
    AND c.coll_name NOT LIKE '/iplant/home/shared/aegis/%'
    AND ($BaseCond)
    AND ($SrcCond)
EOSQL

readonly Tot=$(count < "$ObjectList")
update_progress '%d data objects to replicate\n' "$Tot"

if [ "$Tot" -gt 0 ]
then
  select_cohort 16  0  1 < "$ObjectList"  # 16 1 threaded transfers
  select_cohort  8  1  2 < "$ObjectList"  # 8 2 threaded
  select_cohort  6  2  3 < "$ObjectList"  # 6 3 threaded
  select_cohort  4  3  5 < "$ObjectList"  # 4 4-5 threaded
  select_cohort  3  5  7 < "$ObjectList"  # 3 6-7 threaded
  select_cohort  2  7 15 < "$ObjectList"  # 2 8-15 threaded
  select_cohort  1 15    < "$ObjectList"  # 1 16 threaded
fi
