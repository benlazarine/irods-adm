#! /usr/bin/awk -f
#
# This program parses the lines from a iRODS log file into log entries.
#
# This program reads from standard input and writes to standard output.
#
# Here's an example entry:
#
#     • 01-21 18:20:57 pid:17536 ERROR: [-]    iRODS/server/core/src/rsApiHandler.cpp:520:readAndProcClientMsg :  status [SYS_HEADER_READ_LEN_ERR]  errno [] -- message []
#            [-]     iRODS/lib/core/src/sockComm.cpp:199:readMsgHeader :  status [SYS_HEADER_READ_LEN_ERR]  errno [] -- message [failed to call 'read header']
#                 [-]     libtcp.cpp:197:tcp_read_msg_header :  status [SYS_HEADER_READ_LEN_ERR]  errno [] -- message [only read [0] of [4]]
#
# Each entry is prefixed with a "• ". If a log entry has a carriage return in it,
# the new line is indented two spaces. Before processing a line, all leading
# whitespace is removed.


function month_number(month) {
  switch(month) {
    case "Jan":
      return "01";
    case "Feb":
      return "02";
    case "Mar":
      return "03";
    case "Apr":
      return "04";
    case "May":
      return "05";
    case "Jun":
      return "06";
    case "Jul":
      return "07";
    case "Aug":
      return "08";
    case "Sep":
      return "09";
    case "Oct":
      return "10";
    case "Nov":
      return "11";
    case "Dec":
      return "12";
    default:
      return "??";
  }
}


BEGIN {
  currentEntry = "";
  lastMonth = "";

  if (YEAR !~ /[0-9][0-9]*/) {
    print "The YEAR variable must be set to a number on the command line" > "/dev/stderr";
    exit 1;
  }
}


/^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [ 1-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9] / {
  if (currentEntry != "") {
    print currentEntry;
  }

  month = month_number($1);
  day = $2;
  rest = substr($0, match($0, $3) - 1);

  # Ensure days are two digits
  if (day ~ /^[1-9]$/) {
    day = "0" day;
  }

  if (lastMonth == "12" && month == "01") {
    YEAR = YEAR + 1;
  }

  currentEntry = "• " YEAR "-" month "-" day rest;
  lastMonth = month;
  next;
}


NF > 0 {
  if (currentEntry != "") {
    currentEntry = currentEntry "\n  " $0;
  }
}


END {
  if (currentEntry != "") {
    print currentEntry;
  }
}
