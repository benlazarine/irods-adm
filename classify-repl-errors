#! /bin/bash

readonly Log="$1"

set -e


lsl()
{
  local obj="$1"
  
  while ! size=$(ils -l "$obj" | awk '{ print $4 }')
  do
    sleep 1
  done

  printf '%d %s\n' "$size" "$obj" 
}
export -f lsl


split_out_class()
{
  local errorsFile="$1"
  local classifier="$2"
  local substitution="$3"
  local classFile="$4"

  local errors=$(cat "$errorsFile")
  local classifiedErrors=$(sed --quiet "/$classifier/p" <<< "$errors")

  if [ -n "$classifiedErrors" ]
  then
    comm -2 -3 <(echo "$errors") <(echo "$classifiedErrors") > "$errorsFile"
    sed "s/$classifier/$substitution/" <<< "$classifiedErrors" > "$classFile"
    wc --lines <<< "$classifiedErrors"
  else
    printf '0'
  fi
}


rm --force "$Log".*

readonly ErrorsFile=$(mktemp)
readonly ReplErrorsFile=$(mktemp)

touch "$ErrorsFile" "$ReplErrorsFile"

sed --quiet 's/.*ERROR: \([^\[].*$\)/\1/p' "$Log" | sort > "$ErrorsFile"

readonly ErrCnt=$(cat "$ErrorsFile" | wc --lines)
readonly CntWid=${#ErrCnt}

printf '%*d errors\n' "$CntWid" "$ErrCnt"

readonly ITCnt=$(split_out_class "$ErrorsFile" \
                                 '^replUtil: invalid repl objType 0 for ' \
                                 '' \
                                 "$Log".invalid_types)
printf '%*d invalid object types\n' "$CntWid" "$ITCnt"

readonly SPECnt=$(split_out_class "$ErrorsFile" \
                                  '^replUtil: srcPath \(.*\) does not exist$' \
                                  '\1' \
                                  "$Log".src_path_errors)
printf '%*d source path errors\n' "$CntWid" "$SPECnt"

readonly RCnt=$(split_out_class "$ErrorsFile" '^replUtil: repl error for ' '' "$ReplErrorsFile")
printf '%*d replication errors\n' "$CntWid" "$RCnt"

readonly ReplErrors=$(cat "$ReplErrorsFile")
sort <<< "$ReplErrors" > "$ReplErrorsFile"

readonly SCLECnt=$(split_out_class "$ReplErrorsFile" \
                                   ', status = -27000 status = -27000 SYS_COPY_LEN_ERR$' \
                                   '' \
                                   "$Log".short_file)
printf '%*d short files\n' "$CntWid" "$SCLECnt"

readonly CRBPCnt=$(split_out_class \
  "$ReplErrorsFile" \
  ', status = -116104 status = -116104 SYS_SOCK_READ_ERR, Connection reset by peer$' \
  '' \
  "$Log".connection_reset)
printf '%*d connections reset\n' "$CntWid" "$CRBPCnt"

readonly UCMCnt=$(split_out_class "$ReplErrorsFile" \
                                  ', status = -314000 status = -314000 USER_CHKSUM_MISMATCH$' \
                                  '' \
                                  "$Log".chksum_mismatches)
printf '%*d checksum mismatches\n' "$CntWid" "$UCMCnt"

readonly UFOECnt=$(split_out_class \
  "$ReplErrorsFile" \
  ', status = -510002 status = -510002 UNIX_FILE_OPEN_ERR, No such file or directory$' \
  '' \
  "$Log".missing_file)
printf '%*d file open errors\n' "$CntWid" "$UFOECnt"

printf '%*d unclassified replication errors\n' "$CntWid" $(cat "$ReplErrorsFile" | wc --lines)

if [ -s "$ReplErrorsFile" ]
then
  mv "$ReplErrorsFile" "$Log".unclassified_repl_errors
fi

printf '%*d unclassified errors\n' "$CntWid" $(cat "$ErrorsFile" | wc --lines)

if [ -s "$ErrorsFile" ]
then
  mv "$ErrorsFile" "$Log".unclassified_errors
fi

rm --force "$ErrorsFile" "$ReplErrorsFile" 
