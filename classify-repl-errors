#! /bin/bash

readonly ExecName=$(basename $0)
readonly Version=1


show_help()
{
  cat << EOF

$ExecName version $Version

Usage:
 $ExecName [options] <class_base>

Reads the output of the \`repl\` command and groups the data objects that failed
to replicate into different files based on the error that occurred.

Parameters:
 <class_base>  the common basename of the files that hold the groups of data
               objects

Options:
 -h, --help     show help and exit
 -v, --version  show verion and exit

Summary:

The program reads the output of the \`repl\` command from standard in. It groups
the data objects that failed to replicate into different files based on the
error that occurred. Here's a breakdown of what each output file holds.

 <class_base>.invalid_types  holds the paths to data objects that caused \`irepl\`
 to generate "invalid repl objType 0" errors.

 <class_base>.src_path_errors holds the paths to data objects that have paths
 that cause \`irepl\` problems.

<class_base>.broken_conn holds the paths to data object where the connection to
the IES was broken.

 <class_base>.short_file holds the paths to data objects having sizes larger
 than their respective physical files' sizes.

 <class_base>.connection_reset holds the paths to data objects where the
 connections were reset during the replication.

 <class_base>.chksum_mismatches holds the paths to data objects with checksums
 that differ from the checksums of their respective physical files.

 <class_base>.missing_file holds the paths to data objects that are missing
 their physical files.

<class_base>.unclassified_repl_errors holds the log messages for replication
related errors that couldn't be classified.

<class_base>.unclassified_errors holds the full log messages for errors that
couldn't be classified at all.
EOF
}


show_version()
{
  printf '%s\n' "$Version"
}


exit_with_help()
{
  show_help >&2
  exit 1
}


set -e

if ! opts=$(getopt --name "$ExecName" --options hv --longoptions help,version -- "$@")
then
  exit_with_help
fi

eval set -- "$opts"

while true
do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--version)
      show_version
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      exit_with_help
      ;;
  esac
done

if [ "$#" -lt 1 ]
then
  exit_with_help
fi

readonly LogBase="$1"


split_out_class()
{
  local errorsFile="$1"
  local classifier="$2"
  local substitution="$3"
  local classFile="$4"

  local errors=$(cat "$errorsFile")
  local classifiedErrors=$(sed --quiet "/$classifier/p" <<< "$errors")

  if [ -n "$classifiedErrors" ]
  then
    comm -2 -3 <(echo "$errors") <(echo "$classifiedErrors") > "$errorsFile"
    sed "s/$classifier/$substitution/" <<< "$classifiedErrors" > "$classFile"
    wc --lines <<< "$classifiedErrors"
  else
    printf '0'
  fi
}


split_out_repl_class()
{
  local errorsFile="$1"
  local status="$2"
  local error="$3"
  local classFile="$4"

  split_out_class "$errorsFile" ", status = $status status = $status $error\$" '' "$classFile"
}


readonly ErrorsFile=$(mktemp)
readonly ReplErrorsFile=$(mktemp)
trap "rm --force '$ErrorsFile' '$ReplErrorsFile'" EXIT

sed --quiet 's/.*ERROR: \([^\[].*$\)/\1/p' \
  | sed '/connectToRhost: readVersion to data.cyverse.org failed, msg=/d' \
  | sort > "$ErrorsFile"

readonly ErrCnt=$(cat "$ErrorsFile" | wc --lines)
readonly CntWid=${#ErrCnt}

printf '%*d errors\n' "$CntWid" "$ErrCnt"

readonly ITCnt=$(split_out_class "$ErrorsFile" \
                                 '^replUtil: invalid repl objType 0 for ' \
                                 '' \
                                 "$LogBase".invalid_types)
printf '%*d invalid object types\n' "$CntWid" "$ITCnt"

readonly SPECnt=$(split_out_class "$ErrorsFile" \
                                  '^replUtil: srcPath \(.*\) does not exist$' \
                                  '\1' \
                                  "$LogBase".src_path_errors)
printf '%*d source path errors\n' "$CntWid" "$SPECnt"

split_out_class "$ErrorsFile" '^replUtil: repl error for ' '' "$ReplErrorsFile" > /dev/null
sort --output "$ReplErrorsFile" "$ReplErrorsFile"

readonly SHRLCnt=$(split_out_repl_class "$ReplErrorsFile" \
                                        -4000 \
                                        SYS_HEADER_READ_LEN_ERR \
                                        "$LogBase".broken_conn)
printf '%*d broken connections\n' "$CntWid" "$SHRLCnt"

readonly SCLECnt=$(split_out_repl_class "$ReplErrorsFile" \
                                        -27000 \
                                        SYS_COPY_LEN_ERR \
                                        "$LogBase".short_file)
printf '%*d short files\n' "$CntWid" "$SCLECnt"

readonly CRBPCnt=$(split_out_repl_class "$ReplErrorsFile" \
                                        -116104 \
                                        'SYS_SOCK_READ_ERR, Connection reset by peer' \
                                        "$LogBase".connection_reset)
printf '%*d connections reset\n' "$CntWid" "$CRBPCnt"

readonly UCMCnt=$(split_out_repl_class "$ReplErrorsFile" \
                                       -314000 \
                                       USER_CHKSUM_MISMATCH \
                                       "$LogBase".chksum_mismatches)
printf '%*d checksum mismatches\n' "$CntWid" "$UCMCnt"

readonly UFOECnt=$(split_out_repl_class "$ReplErrorsFile" \
                                        -510002 \
                                        'UNIX_FILE_OPEN_ERR, No such file or directory' \
                                        "$LogBase".missing_file)
printf '%*d file open errors\n' "$CntWid" "$UFOECnt"

printf '%*d unclassified replication errors\n' "$CntWid" $(cat "$ReplErrorsFile" | wc --lines)

if [ -s "$ReplErrorsFile" ]
then
  mv "$ReplErrorsFile" "$LogBase".unclassified_repl_errors
fi

printf '%*d unclassified errors\n' "$CntWid" $(cat "$ErrorsFile" | wc --lines)

if [ -s "$ErrorsFile" ]
then
  mv "$ErrorsFile" "$LogBase".unclassified_errors
fi
